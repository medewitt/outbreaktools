usethis::use_build_ignore("init.R")
# Packages
usethis::use_package("dplyr")
usethis::use_package("ggplot2")
usethis::use_package("padr")
usethis::use_package("lubridate")
usethis::use_package("tidyr")
usethis::use_package("EnvStats")
usethis::use_pipe()
pkgbuild::compile_dll()
# Packages
usethis::use_package("dplyr")
usethis::use_package("ggplot2")
usethis::use_package("padr")
usethis::use_package("lubridate")
usethis::use_package("tidyr")
usethis::use_package("EnvStats")
usethis::use_pipe()
# Add Vignettes
usethis::use_vignette("under-reporting", title = "Example Under Reporting Estimates")
pkgbuild::compile_dll()
# names of stan models
stanmodels <- c("icl_general", "icl_speed", "icl_speed2")
# load each stan module
Rcpp::loadModule("stan_fit4icl_general_mod", what = TRUE)
Rcpp::loadModule("stan_fit4icl_speed_mod", what = TRUE)
Rcpp::loadModule("stan_fit4icl_speed2_mod", what = TRUE)
# instantiate each stanmodel object
stanmodels <- sapply(stanmodels, function(model_name) {
# create C++ code for stan model
stan_file <- if(dir.exists("stan")) "stan" else file.path("inst", "stan")
stan_file <- file.path(stan_file, paste0(model_name, ".stan"))
stanfit <- rstan::stanc_builder(stan_file,
allow_undefined = TRUE,
obfuscate_model_name = FALSE)
stanfit$model_cpp <- list(model_cppname = stanfit$model_name,
model_cppcode = stanfit$cppcode)
# create stanmodel object
methods::new(Class = "stanmodel",
model_name = stanfit$model_name,
model_code = stanfit$model_code,
model_cpp = stanfit$model_cpp,
mk_cppmodule = function(x) get(paste0("model_", model_name)))
})
# names of stan models
stanmodels <- c("icl_general", "icl_speed", "icl_speed2")
# load each stan module
Rcpp::loadModule("stan_fit4icl_general_mod", what = TRUE)
Rcpp::loadModule("stan_fit4icl_speed_mod", what = TRUE)
Rcpp::loadModule("stan_fit4icl_speed2_mod", what = TRUE)
# instantiate each stanmodel object
stanmodels <- sapply(stanmodels, function(model_name) {
# create C++ code for stan model
stan_file <- if(dir.exists("stan")) "stan" else file.path("inst", "stan")
stan_file <- file.path(stan_file, paste0(model_name, ".stan"))
stanfit <- rstan::stanc_builder(stan_file,
allow_undefined = TRUE,
obfuscate_model_name = FALSE)
stanfit$model_cpp <- list(model_cppname = stanfit$model_name,
model_cppcode = stanfit$cppcode)
# create stanmodel object
methods::new(Class = "stanmodel",
model_name = stanfit$model_name,
model_code = stanfit$model_code,
model_cpp = stanfit$model_cpp,
mk_cppmodule = function(x) get(paste0("model_", model_name)))
})
stan_fit4icl_general_mod
# load each stan module
Rcpp::loadModule("stan_fit4icl_general_mod", what = TRUE)
pkgbuild::clean_dll()
pkgbuild::compile_dll()
devtools::document()
devtools::document()
pkgbuild::clean_dll()
pkgbuild::compile_dll()
install.packages(c("arm", "bayestestR", "Boom", "boot", "broom", "class", "countrycode", "dbplyr", "emmeans", "fable", "future", "future.apply", "ggalluvial", "ggeffects", "ggfortify", "graphlayouts", "insight", "isoband", "janitor", "KernSmooth", "labelled", "lhs", "LowRankQP", "MASS", "nlme", "nnet", "pkgbuild", "purrr", "raster", "rayrender", "rayshader", "RcppArmadillo", "RCurl", "rex", "rmutil", "rootSolve", "sf", "spatial", "stopwords", "svUnit", "systemfonts", "tibble", "tidytext", "timetk", "tinytex", "withr", "xfun", "xml2"))
install.packages(c("arm", "bayestestR", "Boom", "boot", "broom", "class", "countrycode", "dbplyr", "emmeans", "fable", "future", "future.apply", "ggalluvial", "ggeffects", "ggfortify", "graphlayouts", "insight", "isoband", "janitor", "KernSmooth", "labelled", "lhs", "LowRankQP", "MASS", "nlme", "nnet", "pkgbuild", "purrr", "raster", "rayrender", "rayshader", "RcppArmadillo", "RCurl", "rex", "rmutil", "rootSolve", "sf", "spatial", "stopwords", "svUnit", "systemfonts", "tibble", "tidytext", "timetk", "tinytex", "withr", "xfun", "xml2"))
roxygen2::roxygenise(load_code = "source")
library(outbreaktools)
# Raw Data
usethis::use_data_raw(name = "covid19_serial_interval")
covid19_serial_interval <- read.csv(here::here("data-raw", "serial_interval.csv"))
usethis::use_data(covid19_serial_interval, overwrite = TRUE)
roxygen2::roxygenise(load_code = "source")
roxygen2::roxygenise(load_code = "source")
usethis::use_package("ggpubr")
usethis::use_package("cowplot")
usethis::use_package("matrixStats")
roxygen2::roxygenise(load_code = "source")
roxygen2::roxygenise(load_code = "source")
roxygen2::roxygenise(load_code = "source")
roxygen2::roxygenise(load_code = "source")
library(outbreaktools)
usethis::use_build_ignore(".travis.yml")
usethis::use_build_ignore("Read-and-delete-me")
mcmc_intervals_data
?range
?colMeans
geom_blank
roxygen2::roxygenise(load_code = "source")
