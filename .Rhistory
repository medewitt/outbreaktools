rt_forecast <- forecast_rt(summarised_rt,
model = function(...){EpiSoon::bsts_model(model = function(ss, y){bsts::AddAutoAr(ss, y = y, lags = 10)}, ...)},
horizon = 21, samples = 10)
rt_scores <- score_forecast(rt_forecast, summarised_rt)
rt_scores
rt_forecast
summarised_rt
rt_estimates <- EpiNow::estimate_R0(cases = cases_df,
serial_intervals = as.matrix(EpiNow::covid_serial_intervals[,1]),
rt_prior = list(mean_prior = 2.6, std_prior = 2),
windows = c(1, 3, 7), rt_samples = 10, si_samples = 2,
min_est_date =  as.Date("2020-03-12"))
summarised_rt <- rt_estimates$rts %>%
group_by(date) %>%
summarise(rt = mean(R))
summarised_rt
rt_forecast <- forecast_rt(summarised_rt,
model = function(...){EpiSoon::bsts_model(model = function(ss, y){bsts::AddAutoAr(ss, y = y, lags = 10)}, ...)},
horizon = 21, samples = 10)
rt_forecast
rt_scores <- score_forecast(rt_forecast, summarised_rt)
rt_forecast
score_forecast
summarise_scores(rt_scores)
summarised_rt_forecast <- summarise_forecast(rt_forecast)
summarised_rt_forecast
plot_forecast(summarised_rt_forecast, EpiSoon::example_obs_rts)
case_forecast <- forecast_cases(cases_df, rt_forecast,
serial_interval = EpiSoon::example_serial_interval)
case_scores <- score_case_forecast(case_forecast, EpiSoon::example_obs_cases)
case_forecast
case_scores <- score_case_forecast(case_forecast, nc_dat)
case_scores <- score_case_forecast(case_forecast, cases_df)
summarised_case_forecast <- summarise_case_forecast(case_forecast)
summarised_case_forecast
plot_forecast(summarised_case_forecast,cases_df)
nc_dat <- nccovid::get_covid_state(select_county = "Forsyth")
cases_df <- nc_dat %>%
select(cases_daily, date) %>%
rename(cases = cases_daily) %>%
as.data.frame()
nc_dat <- nccovid::get_covid_state(select_county = "Forsyth")
cases_df <- nc_dat %>%
select(cases_daily, date) %>%
rename(cases = cases_daily) %>%
as.data.frame()
cases_df <- nc_dat %>%
select(cases_daily, date) %>%
rename(cases = cases_daily) %>%
as.data.frame() %>%
filter(date>= as.Date("2020-03-01"))
rt_estimates <- EpiNow::estimate_R0(cases = cases_df,
serial_intervals = as.matrix(EpiNow::covid_serial_intervals[,1]),
rt_prior = list(mean_prior = 2.6, std_prior = 2),
windows = c(1, 3, 7), rt_samples = 10, si_samples = 2,
min_est_date =  as.Date("2020-03-12"))
summarised_rt <- rt_estimates$rts %>%
group_by(date) %>%
summarise(rt = mean(R))
rt_forecast <- forecast_rt(summarised_rt,
model = function(...){EpiSoon::bsts_model(model = function(ss, y){bsts::AddAutoAr(ss, y = y, lags = 10)}, ...)},
horizon = 21, samples = 10)
rt_scores <- score_forecast(rt_forecast, summarised_rt)
rt_forecast
summarised_rt
rt_scores
rt_forecast
summarised_rt
rt_scores <- score_forecast(rt_forecast, summarised_rt)
summarised_rt
rt_forecast
rt_scores <- score_forecast(rt_forecast, summarised_rt)
rt_scores
nc_dat <- nccovid::get_covid_state(select_county = "Forsyth")
cases_df <- nc_dat %>%
select(cases_daily, date) %>%
rename(cases = cases_daily) %>%
as.data.frame() %>%
filter(date>= as.Date("2020-03-01"))
as.matrix(EpiNow::covid_serial_intervals[,1])
rt_estimates <- EpiNow::estimate_R0(cases = cases_df,
serial_intervals = as.matrix(EpiNow::covid_serial_intervals[,1]),
rt_prior = list(mean_prior = 2.6, std_prior = 2),
windows = c(1, 3, 7), rt_samples = 10, si_samples = 2,
min_est_date =  as.Date("2020-03-01"))
summarised_rt <- rt_estimates$rts %>%
group_by(date) %>%
summarise(rt = mean(R))
summarised_rt
rt_forecast <- forecast_rt(summarised_rt,
model = function(...){EpiSoon::bsts_model(model = function(ss, y){bsts::AddAutoAr(ss, y = y, lags = 10)}, ...)},
horizon = 21, samples = 10)
rt_scores <- score_forecast(rt_forecast, summarised_rt)
rt_forecast
summarised_rt
score_forecast(rt_forecast, EpiSoon::example_obs_rts)
rt_forecast
example_obs_rts
summarised_rt
example_obs_rts
summarised_rt
summarised_rt <- rt_estimates$rts %>%
group_by(date) %>%
summarise(rt = mean(R)) %>%
select(rt, date)
rt_forecast <- forecast_rt(summarised_rt,
model = function(...){EpiSoon::bsts_model(model = function(ss, y){bsts::AddAutoAr(ss, y = y, lags = 10)}, ...)},
horizon = 21, samples = 10)
rt_scores <- score_forecast(fit_samples = rt_forecast, summarised_rt)
rt_scores <- score_forecast(fit_samples = rt_forecast, summarised_rt)
rt_forecast <- forecast_rt(EpiSoon::example_obs_rts[1:10, ],
model = function(...){EpiSoon::bsts_model(model = function(ss, y){bsts::AddAutoAr(ss, y = y, lags = 10)}, ...)},
horizon = 21, samples = 10)
rt_scores <- score_forecast(rt_forecast, EpiSoon::example_obs_rts)
rt_scores
rt_forecast
EpiSoon::example_obs_rts
rt_forecast <- forecast_rt(summarised_rt[1:20,],
model = function(...){EpiSoon::bsts_model(model = function(ss, y){bsts::AddAutoAr(ss, y = y, lags = 10)}, ...)},
horizon = 21, samples = 10)
rt_scores <- score_forecast(fit_samples = rt_forecast, summarised_rt)
score_forecast(rt_forecast, EpiSoon::example_obs_rts)
rt_forecast
rt_forecast <- forecast_rt(EpiSoon::example_obs_rts[1:10, ],
model = function(...){EpiSoon::bsts_model(model = function(ss, y){bsts::AddAutoAr(ss, y = y, lags = 10)}, ...)},
horizon = 21, samples = 10)
rt_forecast
rt_forecast <- forecast_rt(EpiSoon::example_obs_rts[1:10, ],
model = function(...){EpiSoon::bsts_model(model = function(ss, y){bsts::AddAutoAr(ss, y = y, lags = 10)}, ...)},
horizon = 21, samples = 10)
rt_scores <- score_forecast(rt_forecast, EpiSoon::example_obs_rts)
rt_scores
rt_scores <- score_forecast(fit_samples = rt_forecast, summarised_rt)
score_forecast(rt_forecast, EpiSoon::example_obs_rts)
summarised_rt
rt_scores <- score_forecast(fit_samples = rt_forecast, summarised_rt)
score_forecast(rt_forecast, EpiSoon::example_obs_rts)
rt_forecast <- forecast_rt(summarised_rt[1:20,],
model = function(...){EpiSoon::bsts_model(model = function(ss, y){bsts::AddAutoAr(ss, y = y, lags = 10)}, ...)},
horizon = 21, samples = 10)
rt_scores <- score_forecast(fit_samples = rt_forecast, summarised_rt)
score_forecast(rt_forecast, EpiSoon::example_obs_rts)
rt_scores
rt_forecast <- forecast_rt(summarised_rt[1:20,],
model = function(...){EpiSoon::bsts_model(model = function(ss, y){bsts::AddAutoAr(ss, y = y, lags = 10)}, ...)},
horizon = 21, samples = 10)
rt_scores <- score_forecast(fit_samples = rt_forecast, summarised_rt)
rt_scores
summarise_scores(rt_scores)
summarised_rt_forecast <- summarise_forecast(rt_forecast)
summarised_rt_forecast
case_scores <- score_case_forecast(case_forecast, cases_df)
case_forecast <- forecast_cases(cases_df, rt_forecast,
serial_interval = EpiSoon::example_serial_interval)
case_scores <- score_case_forecast(case_forecast, cases_df)
summarised_case_forecast <- summarise_case_forecast(case_forecast)
summarised_case_forecast
plot_forecast(summarised_case_forecast,cases_df)
it_rt_forecast <- iterative_rt_forecast(rt_estimates,
model = function(...){
EpiSoon::bsts_model(model = function(ss, y){bsts::AddAutoAr(ss, y = y, lags = 10)}, ...)
},
horizon = 7, samples = 10, min_points = 4)
it_rt_forecast
it_rt_forecast
rt_estimates
it_rt_forecast <- iterative_rt_forecast(summarised_rt,
model = function(...){
EpiSoon::bsts_model(model = function(ss, y){bsts::AddAutoAr(ss, y = y, lags = 10)}, ...)
},
horizon = 7, samples = 10, min_points = 4)
it_rt_forecast
it_cases_forecast <- iterative_case_forecast(it_fit_samples = it_rt_forecast,
cases = cases_df,
serial_interval = EpiSoon::example_serial_interval)
it_cases_forecast
model_eval <- evaluate_model(summarised_rt,
cases_df,
model = function(...){
EpiSoon::bsts_model(model = function(ss, y){bsts::AddAutoAr(ss, y = y, lags = 10)}, ...)
},
horizon = 21, samples = 10,
serial_interval = EpiSoon::example_serial_interval)
plot_forecast_evaluation(model_eval$forecast_rts,
EpiSoon::example_obs_rts,
horizon_to_plot = 7)
plot_forecast_evaluation(model_eval$forecast_cases,
EpiSoon::example_obs_cases,
horizon_to_plot = 7)
plot_forecast_evaluation(model_eval$forecast_cases,
cases_df,
horizon_to_plot = 7)
plot_forecast_evaluation(model_eval$forecast_rts,
summarised_rt,
horizon_to_plot = 7)
plot_forecast_evaluation(model_eval$forecast_cases,
cases_df,
horizon_to_plot = 14)
forecast_cases
model_eval$forecast_cases
roxygen2::roxygenise(load_code = "source")
# Add PAckagedown
usethis::use_pkgdown()
pkgdown::build_site()
library(outbreaktools)
library(nccovid)
dat <- pull_state_cases()
dat
state_of_interest = "North Carolina"
nc_data <- nccovid::get_covid_state(state = state_of_interest)
nc_data <- nc_data %>%
dplyr::select(county,date, cases_daily,deaths_daily) %>%
setNames(c("country", "date", "new_cases", "new_deaths")) %>%
dplyr::mutate(date = lubridate::mdy(date)) %>%
dplyr::group_by(country) %>%
padr::pad() %>%
dplyr::mutate(new_cases = tidyr::replace_na(new_cases, 0),
new_deaths = tidyr::replace_na(new_deaths, 0)) %>%
dplyr::group_by(country) %>%
dplyr::mutate(cum_deaths = sum(new_deaths)) %>%
dplyr::filter(cum_deaths > 0) %>%
dplyr::select(-cum_deaths)
nc_data <- nc_data %>%
dplyr::select(county,date, cases_daily,deaths_daily) %>%
setNames(c("country", "date", "new_cases", "new_deaths")) %>%
#dplyr::mutate(date = lubridate::mdy(date)) %>%
dplyr::group_by(country) %>%
padr::pad() %>%
dplyr::mutate(new_cases = tidyr::replace_na(new_cases, 0),
new_deaths = tidyr::replace_na(new_deaths, 0)) %>%
dplyr::group_by(country) %>%
dplyr::mutate(cum_deaths = sum(new_deaths)) %>%
dplyr::filter(cum_deaths > 0) %>%
dplyr::select(-cum_deaths)
nc_data
nc_data <- nc_data %>%
dplyr::select(county,date, cases_daily,deaths_daily) %>%
setNames(c("country", "date", "new_cases", "new_deaths")) %>%
#dplyr::mutate(date = lubridate::mdy(date)) %>%
dplyr::group_by(country) %>%
padr::pad(interval = "day") %>%
dplyr::mutate(new_cases = tidyr::replace_na(new_cases, 0),
new_deaths = tidyr::replace_na(new_deaths, 0)) %>%
dplyr::group_by(country) %>%
dplyr::mutate(cum_deaths = sum(new_deaths)) %>%
dplyr::filter(cum_deaths > 0) %>%
dplyr::select(-cum_deaths)
nc_data <- nc_data %>%
dplyr::select(county,date, cases_daily,deaths_daily) %>%
setNames(c("country", "date", "new_cases", "new_deaths")) %>%
#dplyr::mutate(date = lubridate::mdy(date)) %>%
dplyr::group_by(country) %>%
padr::pad(x = day, interval = "day") %>%
dplyr::mutate(new_cases = tidyr::replace_na(new_cases, 0),
new_deaths = tidyr::replace_na(new_deaths, 0)) %>%
dplyr::group_by(country) %>%
dplyr::mutate(cum_deaths = sum(new_deaths)) %>%
dplyr::filter(cum_deaths > 0) %>%
dplyr::select(-cum_deaths)
nc_data <- nccovid::get_covid_state(state = state_of_interest)
nc_data <- nc_data %>%
dplyr::select(county,date, cases_daily,deaths_daily) %>%
setNames(c("country", "date", "new_cases", "new_deaths")) %>%
#dplyr::mutate(date = lubridate::mdy(date)) %>%
dplyr::group_by(country) %>%
padr::pad(x = day, interval = "day") %>%
dplyr::mutate(new_cases = tidyr::replace_na(new_cases, 0),
new_deaths = tidyr::replace_na(new_deaths, 0)) %>%
dplyr::group_by(country) %>%
dplyr::mutate(cum_deaths = sum(new_deaths)) %>%
dplyr::filter(cum_deaths > 0) %>%
dplyr::select(-cum_deaths)
nc_data <- nccovid::get_covid_state(state = state_of_interest)
nc_data <- nc_data %>%
dplyr::select(county,date, cases_daily,deaths_daily) %>%
setNames(c("country", "date", "new_cases", "new_deaths")) %>%
#dplyr::mutate(date = lubridate::mdy(date)) %>%
dplyr::group_by(country) %>%
padr::pad(interval = "day") %>%
dplyr::mutate(new_cases = tidyr::replace_na(new_cases, 0),
new_deaths = tidyr::replace_na(new_deaths, 0)) %>%
dplyr::group_by(country) %>%
dplyr::mutate(cum_deaths = sum(new_deaths)) %>%
dplyr::filter(cum_deaths > 0) %>%
dplyr::select(-cum_deaths)
nc_data
nc_data <- nccovid::get_covid_state(state = state_of_interest)
nc_data <- nc_data %>%
dplyr::select(county,date, cases_daily,deaths_daily) %>%
setNames(c("country", "date", "new_cases", "new_deaths")) %>%
#dplyr::mutate(date = lubridate::mdy(date)) %>%
dplyr::group_by(country) %>%
padr::pad(interval = "day") %>%
dplyr::mutate(new_cases = tidyr::replace_na(new_cases, 0),
new_deaths = tidyr::replace_na(new_deaths, 0)) %>%
dplyr::group_by(country) %>%
dplyr::mutate(cum_deaths = sum(new_deaths)) %>%
dplyr::filter(cum_deaths > 0) %>%
dplyr::select(-cum_deaths)
nc_death <- nc_data %>%
dplyr::group_by(country) %>%
dplyr::summarise(tot = sum(new_deaths)) %>%
dplyr::filter(tot >= min_reported_deaths) %>%
dplyr::pull(country)
nc_data <- nccovid::get_covid_state(state = state_of_interest)
nc_data <- nc_data %>%
dplyr::select(county,date, cases_daily,deaths_daily) %>%
setNames(c("country", "date", "new_cases", "new_deaths")) %>%
#dplyr::mutate(date = lubridate::mdy(date)) %>%
dplyr::group_by(country) %>%
padr::pad(interval = "day") %>%
dplyr::mutate(new_cases = tidyr::replace_na(new_cases, 0),
new_deaths = tidyr::replace_na(new_deaths, 0)) %>%
dplyr::group_by(country) %>%
dplyr::mutate(cum_deaths = sum(new_deaths)) %>%
dplyr::filter(cum_deaths > 0) %>%
dplyr::select(-cum_deaths)
nc_data %>%
dplyr::group_by(country) %>%
dplyr::summarise(tot = sum(new_deaths))
min_reported_deaths = 5
nc_data %>%
dplyr::group_by(country) %>%
dplyr::summarise(tot = sum(new_deaths)) %>%
dplyr::filter(tot >= min_reported_deaths) %>%
dplyr::pull(country)
nc_death <- nc_data %>%
dplyr::group_by(country) %>%
dplyr::summarise(tot = sum(new_deaths)) %>%
dplyr::filter(tot >= min_reported_deaths) %>%
dplyr::pull(country)
nc_data <- nc_data %>%
dplyr::filter(country %in% nc_death)
nc_data
library(outbreaktools)
library(outbreaktools)
library(nccovid)
dat <- pull_state_cases()
reports <- generate_underreporting_estimates(dat)
reports
reports %>%
dplyr::select(country, total_cases, total_deaths,underreporting_estimate_clean) %>%
knitr::kable(col.names = c("County", "Cases", "Deaths", "Perc Reported"), caption = "Estimated Reported Symptomatic Cases by North Carolina County")
reports %>%
arrange(-lower) %>%
dplyr::select(country, total_cases, total_deaths,underreporting_estimate_clean) %>%
knitr::kable(col.names = c("County", "Cases", "Deaths", "Perc Reported"), caption = "Estimated Reported Symptomatic Cases by North Carolina County")
usethis::use_vignette("ifr-meta", title = "Meta-Analysis of Infection Fatality Ratio")
1.7-.95
library(outbreaktools)
dat_meta <- tibble::tribble(
~"Author", ~"TE", ~"ci95",
"Jung et al", .7, 0.52,
"CEBM", .2, .1,
"Ferguson et al", 1, .62,
"Nishiura et al", .45, .09,
"Tian et al", 1.15, 1.15,
"Verity et al", .66, .6,
"Russell et al", .6, .4,
"Bendavid et al", .2, .04,
"New York City", .93, .02,
"Rinaldi et al", 1.29, .72,
"Roques et al", .8, .45,
"Villa et al", 1.6, .5,
"Modi et al", .95, .75
) %>%
mutate(seTE = ci95/1.96)
library(outbreaktools)
library(brms)
priors <- c(prior(normal(0,1), class = Intercept),
prior(cauchy(0,0.5), class = sd))
library(dplyr)
dat_meta <- tibble::tribble(
~"Author", ~"TE", ~"ci95",
"Jung et al", .7, 0.52,
"CEBM", .2, .1,
"Ferguson et al", 1, .62,
"Nishiura et al", .45, .09,
"Tian et al", 1.15, 1.15,
"Verity et al", .66, .6,
"Russell et al", .6, .4,
"Bendavid et al", .2, .04,
"New York City", .93, .02,
"Rinaldi et al", 1.29, .72,
"Roques et al", .8, .45,
"Villa et al", 1.6, .5,
"Modi et al", .95, .75
) %>%
mutate(seTE = ci95/1.96)
priors <- c(prior(normal(0,1), class = Intercept),
prior(cauchy(0,0.5), class = sd))
priors <- c(prior(normal(.01,.05), class = Intercept),
prior(cauchy(0,0.5), class = sd))
m <- brm(TE|se(seTE) ~ 1 + (1|Author),
data = dat_meta,
prior = priors,
iter = 4000)
pp_check(m)
summary(m)
post.samples <- posterior_samples(m, c("^b", "^sd"))
names(post.samples) <- c("smd", "tau")
post.samples
library(ggplot2)
# Plot for SMD
ggplot(aes(x = smd), data = post.samples) +
geom_density(fill = "lightblue", color = "lightblue", alpha = 0.7) +
geom_point(y = 0, x = mean(post.samples$smd)) +
labs(x = expression(italic(SMD)),
y = element_blank()) +
theme_minimal()
# Plot for tau
ggplot(aes(x = tau), data = post.samples) +
geom_density(fill = "lightgreen", color = "lightgreen", alpha = 0.7) +
geom_point(y = 0, x = mean(post.samples$tau)) +
labs(x = expression(tau),
y = element_blank()) +
theme_minimal()
ranef(m)
pp_check(m, nsamples = 25)
priors <- c(prior(normal(.01,.001), class = Intercept),
prior(cauchy(0,0.1), class = sd))
m <- brm(TE|se(seTE) ~ 1 + (1|Author),
data = dat_meta,
prior = priors,chains = 2,cores = 2,
iter = 4000)
pp_check(m, nsamples = 25)
summary(m)
post.samples <- posterior_samples(m, c("^b", "^sd"))
names(post.samples) <- c("smd", "tau")
library(ggplot2)
# Plot for SMD
ggplot(aes(x = smd), data = post.samples) +
geom_density(fill = "lightblue", color = "lightblue", alpha = 0.7) +
geom_point(y = 0, x = mean(post.samples$smd)) +
labs(x = expression(italic(SMD)),
y = element_blank()) +
theme_minimal()
# Plot for tau
ggplot(aes(x = tau), data = post.samples) +
geom_density(fill = "lightgreen", color = "lightgreen", alpha = 0.7) +
geom_point(y = 0, x = mean(post.samples$tau)) +
labs(x = expression(tau),
y = element_blank()) +
theme_minimal()
fixef(m)
priors <- c(prior(normal(.01,.002), class = Intercept),
prior(cauchy(0,0.1), class = sd))
m <- brm(TE|se(seTE) ~ 1 + (1|Author),
data = dat_meta,
prior = priors,chains = 4,cores = 4,
iter = 4000)
pp_check(m, nsamples = 25)
summary(m)
post.samples <- posterior_samples(m, c("^b", "^sd"))
names(post.samples) <- c("smd", "tau")
matrixStats::rowQuantiles(post.samples$smd)
mean(post.samples$smd)
quantile(post.samples$smd, c(.05, .9))
quantile(post.samples$smd, c(.05, .5, .9))
quantile(post.samples$smd, c(.05, .5, .95))
quantile(post.samples$smd, c(.05, .5, .95))*100
reports <- generate_underreporting_estimates(dat, cCFRBaseline = 1,
cCFREstimateRange = c(.6, 1.4))
reports %>%
arrange(-lower) %>%
dplyr::select(country, total_cases, total_deaths,underreporting_estimate_clean) %>%
knitr::kable(col.names = c("County", "Cases", "Deaths", "Perc Reported"), caption = "Estimated Reported Symptomatic Cases by North Carolina County (Minimum of Five Reported Deaths)")
post_samples <- posterior_samples(m, c("^b", "^sd"))
names(post_samples) <- c("smd", "tau")
hist(post_samples$smd)
hist(post_samples$smd, col = "grey")
hist(post_samples$smd, col = "grey", main = "Posterior Distribution of Infection Fatality Rate", adj = 0)
hist(post_samples$smd*100, col = "grey", main = "Posterior Distribution of Infection Fatality Rate", adj = 0, ylab = "Frequency", xlab = "IFR")
abline(v = quantile(post.samples$smd, c(.05, .5, .95))*100, lyt = 2, col = "orange")
hist(post_samples$smd*100, col = "grey", main = "Posterior Distribution of Infection Fatality Rate", adj = 0, ylab = "Frequency", xlab = "IFR")
abline(v = quantile(post.samples$smd, c(.05, .5, .95))*100, lyt = 2, col = "orange")
abline(v = quantile(post.samples$smd, c(.05, .5, .95))*100, lty = 2, col = "orange")
hist(post_samples$smd*100, col = "grey", main = "Posterior Distribution of Infection Fatality Rate", adj = 0, ylab = "Frequency", xlab = "IFR")
abline(v = quantile(post.samples$smd, c(.05, .5, .95))*100, lty = 2, col = "orange")
hist(post_samples$smd*100, col = "grey", main = "Posterior Distribution of Infection Fatality Rate", adj = 0, ylab = "Frequency", xlab = "IFR")
abline(v = quantile(post.samples$smd, c(.05, .5, .95))*100, lty = 2, col = "orange")
hist(post_samples$smd*100, col = "grey", main = "Posterior Distribution of Infection Fatality Rate", adj = 0, ylab = "Frequency", xlab = "IFR")
abline(v = quantile(post.samples$smd, c(.05, .5, .95))*100, lty = 2, col = "orange")
text(x = quantile(post.samples$smd, c(.05, .5, .95))*100, y= 0,labels = quantile(post.samples$smd, c(.05, .5, .95))*100)
text(x = quantz, y= 0,labels = round(quantz,2))
quantz <- quantile(post.samples$smd, c(.05, .5, .95))*100
hist(post_samples$smd*100, col = "grey", main = "Posterior Distribution of Infection Fatality Rate", adj = 0, ylab = "Frequency", xlab = "IFR")
abline(v =quantz, lty = 2, col = "orange")
text(x = quantz, y= 0,labels = round(quantz,2))
quantz <- quantile(post.samples$smd, c(.05, .5, .95))*100
hist(post_samples$smd*100, col = "grey", main = "Posterior Distribution of Infection Fatality Rate", adj = 0, ylab = "Frequency", xlab = "IFR")
abline(v =quantz, lty = 2, col = "orange")
text(x = quantz, y= 10,labels = round(quantz,2))
pp_check(m, nsamples = 25)+
ggplot2::theme_minimal()
reports <- generate_underreporting_estimates(dat, cCFRBaseline = 1,
cCFREstimateRange = c(.67, 1.34))
reports %>%
arrange(-lower) %>%
dplyr::select(country, total_cases, total_deaths,underreporting_estimate_clean) %>%
knitr::kable(col.names = c("County", "Cases", "Deaths", "Perc Reported"), caption = "Estimated Reported Symptomatic Cases by North Carolina County (Minimum of Five Reported Deaths)")
reports %>%
arrange(-lower) %>%
dplyr::select(country, total_cases, total_deaths,underreporting_estimate_clean) %>%
knitr::kable(col.names = c("County", "Cases", "Deaths", "Perc Reported"), caption = "Estimated Reported Symptomatic Cases by North Carolina County (Minimum of Five Reported Deaths)")
dat <- pull_state_cases()
reports <- generate_underreporting_estimates(dat, cCFRBaseline = 1,
cCFREstimateRange = c(.67, 1.34))
reports %>%
arrange(-lower) %>%
dplyr::select(country, total_cases, total_deaths,underreporting_estimate_clean) %>%
knitr::kable(col.names = c("County", "Cases", "Deaths", "Perc Reported"), caption = "Estimated Reported Symptomatic Cases by North Carolina County (Minimum of Five Reported Deaths)")
